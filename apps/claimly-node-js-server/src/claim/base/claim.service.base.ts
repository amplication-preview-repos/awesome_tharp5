/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Claim as PrismaClaim,
  ClaimStatus as PrismaClaimStatus,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class ClaimServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClaimCountArgs, "select">): Promise<number> {
    return this.prisma.claim.count(args);
  }

  async claims(args: Prisma.ClaimFindManyArgs): Promise<PrismaClaim[]> {
    return this.prisma.claim.findMany(args);
  }
  async claim(args: Prisma.ClaimFindUniqueArgs): Promise<PrismaClaim | null> {
    return this.prisma.claim.findUnique(args);
  }
  async createClaim(args: Prisma.ClaimCreateArgs): Promise<PrismaClaim> {
    return this.prisma.claim.create(args);
  }
  async updateClaim(args: Prisma.ClaimUpdateArgs): Promise<PrismaClaim> {
    return this.prisma.claim.update(args);
  }
  async deleteClaim(args: Prisma.ClaimDeleteArgs): Promise<PrismaClaim> {
    return this.prisma.claim.delete(args);
  }

  async getClaimStatus(parentId: string): Promise<PrismaClaimStatus | null> {
    return this.prisma.claim
      .findUnique({
        where: { id: parentId },
      })
      .claimStatus();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.claim
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
