/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClaimStatus as PrismaClaimStatus,
  Claim as PrismaClaim,
} from "@prisma/client";

export class ClaimStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClaimStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.claimStatus.count(args);
  }

  async claimStatuses(
    args: Prisma.ClaimStatusFindManyArgs
  ): Promise<PrismaClaimStatus[]> {
    return this.prisma.claimStatus.findMany(args);
  }
  async claimStatus(
    args: Prisma.ClaimStatusFindUniqueArgs
  ): Promise<PrismaClaimStatus | null> {
    return this.prisma.claimStatus.findUnique(args);
  }
  async createClaimStatus(
    args: Prisma.ClaimStatusCreateArgs
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.create(args);
  }
  async updateClaimStatus(
    args: Prisma.ClaimStatusUpdateArgs
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.update(args);
  }
  async deleteClaimStatus(
    args: Prisma.ClaimStatusDeleteArgs
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.delete(args);
  }

  async findClaims(
    parentId: string,
    args: Prisma.ClaimFindManyArgs
  ): Promise<PrismaClaim[]> {
    return this.prisma.claimStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .claims(args);
  }
}
