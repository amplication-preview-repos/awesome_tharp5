/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClaimStatus } from "./ClaimStatus";
import { ClaimStatusCountArgs } from "./ClaimStatusCountArgs";
import { ClaimStatusFindManyArgs } from "./ClaimStatusFindManyArgs";
import { ClaimStatusFindUniqueArgs } from "./ClaimStatusFindUniqueArgs";
import { CreateClaimStatusArgs } from "./CreateClaimStatusArgs";
import { UpdateClaimStatusArgs } from "./UpdateClaimStatusArgs";
import { DeleteClaimStatusArgs } from "./DeleteClaimStatusArgs";
import { ClaimFindManyArgs } from "../../claim/base/ClaimFindManyArgs";
import { Claim } from "../../claim/base/Claim";
import { ClaimStatusService } from "../claimStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClaimStatus)
export class ClaimStatusResolverBase {
  constructor(
    protected readonly service: ClaimStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "read",
    possession: "any",
  })
  async _claimStatusesMeta(
    @graphql.Args() args: ClaimStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClaimStatus])
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "read",
    possession: "any",
  })
  async claimStatuses(
    @graphql.Args() args: ClaimStatusFindManyArgs
  ): Promise<ClaimStatus[]> {
    return this.service.claimStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClaimStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "read",
    possession: "own",
  })
  async claimStatus(
    @graphql.Args() args: ClaimStatusFindUniqueArgs
  ): Promise<ClaimStatus | null> {
    const result = await this.service.claimStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClaimStatus)
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "create",
    possession: "any",
  })
  async createClaimStatus(
    @graphql.Args() args: CreateClaimStatusArgs
  ): Promise<ClaimStatus> {
    return await this.service.createClaimStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClaimStatus)
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "update",
    possession: "any",
  })
  async updateClaimStatus(
    @graphql.Args() args: UpdateClaimStatusArgs
  ): Promise<ClaimStatus | null> {
    try {
      return await this.service.updateClaimStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClaimStatus)
  @nestAccessControl.UseRoles({
    resource: "ClaimStatus",
    action: "delete",
    possession: "any",
  })
  async deleteClaimStatus(
    @graphql.Args() args: DeleteClaimStatusArgs
  ): Promise<ClaimStatus | null> {
    try {
      return await this.service.deleteClaimStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Claim], { name: "claims" })
  @nestAccessControl.UseRoles({
    resource: "Claim",
    action: "read",
    possession: "any",
  })
  async findClaims(
    @graphql.Parent() parent: ClaimStatus,
    @graphql.Args() args: ClaimFindManyArgs
  ): Promise<Claim[]> {
    const results = await this.service.findClaims(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
